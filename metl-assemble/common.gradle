import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date

apply from: metlAssembleDir + '/asciidoc.gradle'

    group = 'org.jumpmind.metl'
        
    apply plugin: 'eclipse-wtp'
    apply plugin: 'java'
    apply plugin: 'license-report'
	apply plugin: 'jacoco'
	apply plugin: 'license'
	apply plugin: 'maven'
	
    sourceCompatibility=1.8
    targetCompatibility=1.8   
    
    license {
        header rootProject.file('HEADER')
        strictCheck true
        includes(["**/*.java", "**/*.properties", "**/*.xml"])
    }
    
    configurations { deployerJars }
    configurations { testArtifacts.extendsFrom testRuntime }

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    
    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: deployUploadUrl) {
                authentication(userName: deployUser, password: deployPassword)
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    artifacts { archives sourcesJar }

    task deploy {
        description 'Shortcut for Maven users'
        dependsOn tasks.uploadArchives
    }    
    
    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                       "Implementation-Version": appVersion,
                       "Project-Artifact": project.name,                       
                       "Build-Version": appVersion,
                       "Build-Time": new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date()),
                       "Build-Scm-Version": scmVersion)
        }    
    }    
    
    test {
        ignoreFailures true
    }
    
    ext {
        antVersion = '1.7.0'
        log4jVersion = '1.2.17'
        slf4jVersion = '1.7.7'
        springVersion = '4.1.6.RELEASE'
        vaadinVersion = '7.5.6'
        groovyVersion = '2.4.3'
        jettyVersion = '9.3.3.v20150827'
        commonsLangVersion = '2.6'
        commonsDbcpVersion = '1.4'
        commonsIoVersion = '2.4'
        commonsNetVersion = '3.3'
        httpComponentsVersion = '4.3.2'
        jaxenVersion = '1.1.4'
        jacksonVersion = '2.5.2'
        javaMailVersion = '1.4.7'
        jdomVersion = '2.0.5'
        jt400Version = '8.4'
        symmetricVersion = '3.7.x-SNAPSHOT'
        servletVersion = '3.0.1'
        h2Version = '1.4.190'
        mysqlVersion = '5.1.29'
        jtdsVersion = '1.3.1'
        postgresqlVersion = '9.2-1002-jdbc4'
        mockitoVersion = '1.9.5'
        powerMockVersion = '1.5.3'
        springfoxSwaggerVersion = '2.0.0'
        reficioSoapVersion = '1.0.0-SNAPSHOT'
        kxmlVersion='2.3.0'

        env = System.getenv()                
    }

    repositories {
        mavenCentral()        
        maven { url "http://maven.vaadin.com/vaadin-addons" }
        maven { url "http://maven.jumpmind.com/repo" }
        maven { url "http://repo.reficio.org/maven" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/deprecated" }
        maven { url "http://www.soapui.org/repository/maven2" }
        maven { url "https://github.com/santhosh-tekuri/maven-repository/raw/master" }
        jcenter()        
    }
    
    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = false
        }        
    }
    
    eclipse.project.file.withXml { provider ->
      ignoreDerivedResources(provider.asNode())
    }
 
    def ignoreDerivedResources(projectDescription, directories = ["build", "target", "test-output"]) {
      def count = directories.count { file(it).exists() }
      if (count > 0) {
        def filter = projectDescription
          .appendNode("filteredResources")
          .appendNode("filter")
        filter.appendNode("id", System.currentTimeMillis().toString().trim())
        filter.appendNode("type", "26")
        filter.appendNode("name")
        def matcher = filter.appendNode("matcher")
        matcher.appendNode("id", "org.eclipse.ui.ide.orFilterMatcher")
        def arguments = matcher.appendNode("arguments")
        directories.each {
          if (file(it).exists()) {
            def dirMatcher = arguments.appendNode("matcher")
            dirMatcher.appendNode("id", "org.eclipse.ui.ide.multiFilter")
            dirMatcher.appendNode("arguments", "1.0-projectRelativePath-matches-false-false-${it}")
          }
        }
      }
    }    
       
    task develop {
        description 'Generates Eclipse artifacts and sets up your development environment'
        dependsOn tasks.cleanEclipse, tasks.cleanEclipseWtp, tasks.eclipse, tasks.eclipseWtp
    }
    
    task wrapper(type: Wrapper) {
        gradleVersion = '2.7'
    }    