apply from: '../metl-assemble/common.gradle'

configurations {
    jaxbConfig
}
 
dependencies {
    jaxbConfig 'org.glassfish.jaxb:jaxb-core:2.2.11'
    jaxbConfig 'org.glassfish.jaxb:jaxb-jxc:2.2.11'
    jaxbConfig 'org.glassfish.jaxb:jaxb-xjc:2.2.11'
}

dependencies {
    compile "org.springframework:spring-context:$springVersion"
    compile "org.jumpmind.symmetric:symmetric-util:$symmetricVersion"
    compile "org.jumpmind.symmetric:symmetric-db:$symmetricVersion"
    compile "org.jumpmind.symmetric:symmetric-jdbc:$symmetricVersion"
    compile "org.jumpmind.symmetric:symmetric-io:$symmetricVersion"
    compile "org.jumpmind.symmetric:symmetric-core:$symmetricVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"
    compile "commons-dbcp:commons-dbcp:$commonsDbcpVersion"
    compile "commons-io:commons-io:$commonsIoVersion"
    compile "commons-net:commons-net:$commonsNetVersion"    
    compile "jaxen:jaxen:$jaxenVersion"
    compile "javax.mail:mail:$javaMailVersion"
    compile "org.jdom:jdom2:$jdomVersion"
    compile "javax.el:javax.el-api:3.0.0"
    compile "com.h2database:h2:$h2Version"
    compile "org.jumpmind.symmetric.jdbc:postgresql:$postgresqlVersion"
    compile "net.sourceforge.jtds:jtds:$jtdsVersion"
    compile "net.sf.jt400:jt400:$jt400Version"
    compile "org.apache.httpcomponents:httpclient:$httpComponentsVersion"
    compile "org.apache.httpcomponents:httpmime:$httpComponentsVersion"
    compile "org.jumpmind.symmetric.schemaspy:schemaspy:5.0.0"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"  
    compile "com.jcraft:jsch:0.1.52"
    compile "oauth.signpost:oauth-signpost:1.2.1.2"    
    compile "ant:ant:$antVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    testCompile "org.powermock:powermock-api-mockito:$powerMockVersion"
    testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"

}

task (schemaspy, dependsOn: 'classes', type: JavaExec) {
    description 'Generates schema spy output for the Metl configuration data model'
    main = 'org.jumpmind.metl.core.persist.SchemaSpy'
    classpath = sourceSets.test.runtimeClasspath
}

task xsdgen () {
  doLast {
    ant.taskdef(name: 'schemagen', classname: 'com.sun.tools.jxc.SchemaGenTask', classpath: configurations.jaxbConfig.asPath)
    ant.schemagen(
      srcdir: 'src/main/java/org/jumpmind/metl/core/runtime/component/definition',
      destdir: 'src/main/resources',
      includeAntRuntime: 'false'
    ) {
      schema(file: "components.xsd", namespace: "")
    }
  }
}

xsdgen.dependsOn compileJava